.. raw:: html

   <!-- Patch landslide slides background color --!>
   <style type="text/css">
   div.slide {
       background: #fff;
   }
   </style>

Input/output
************

----

Silx IO
=======

- Provides function to open file data

  - Accessible as HDF5-like objects
  - In read-only
  - Support HDF5 files, Spec files, EDF files (plus format supported by `FabIO`), numpy files

- In symbiosis with our widgets

  - HDF5 tree widget
  - DataViewer

- Also contains

  - HDF5 converter
  - Dictionary dump
  - Legacy `specfilewrapper` code

----

HDF5 introduction
=================

HDF5 (for Hierarchical Data Format) is a file format to structure and store
data.

- Standard exchange format for heterogeneous data
- Hierarchical collection of data (directory and file, UNIX-like path)

  - **File**: the root of the container
  - **Group**: a grouping structure containing groups or datasets
  - **Dataset**: a multidimensional array of data elements
  - And other features (links, attributes, datatypes)

.. image:: img/hdf5.png

----

HDF5 example
============

Here is an example of file generated by ``pyFAI``.

.. image:: img/hdf5_example.png

----

NeXus introduction
==================

NeXus is a common data format for neutron, x-ray and muon science based on
HDF5.

Set of rules to structure a HDF5 file for interoperability of the data.

We tries to follow NeXus convention to display data or to expose data.

.. image:: img/nexus.png

----

Specfile with silx
==================

``Silx`` provides access to spec files using an HDF5-like mapping. It uses a
subset of the HDF5 model, based on NeXus.

HDF5-like mapping
-----------------

.. image:: img/spech5_arrows.png

----

EDF with silx
=============

``Silx`` provides access to EDF files (and other format supported by `FabIO`)
using an HDF5-like mapping. It is a subset of the HDF5 model, based on NeXus.

HDF5-like mapping
-----------------

.. image:: img/fabioh5_arrows.png

----

Silx IO API
===========

Based on HDF5 and `h5py` module API.

Open a file
-----------

   .. code-block:: python

      import silx.io

      # open
      obj = silx.io.open(filename)
      # do your stuff here
      obj.close()


      # or using context manager
      with silx.io.open(filename) as obj:
         # do your stuff here
         # the file will be closed automatically at the end of the `with`

----

Silx IO API
===========

Based on HDF5 and `h5py` module API.

Common properties
-----------------

   .. code-block:: python

      obj.name   # the path name
      obj.parent # the direct container of the object
      obj.file   # the file container of the object

      # test object type
      if silx.io.is_file(obj):
         print("this is a root file")

         # path of the file from the file system
         obj.filename

      if silx.io.is_group(obj):
         # BTW a file is a group
         print("this is a group")

      if silx.io.is_dataset(obj):
         print("this is a dataset")

----

Silx IO API
===========

Based on HDF5 and `h5py` module API.

Node traversal
--------------

   .. code-block:: python

      if silx.io.is_group(obj):
         # it can contains child

         # number of child
         len(obj)

         # iterator on child names
         obj.keys()

         # access to a child
         child = obj["child_name"]

         # access to a child using a path
         child = obj["path/to/a/child"]

         # the path can be absolute
         child = obj["/absolute/path/to/a/child"]

----

Silx IO API
===========

The content of a dataset is a `numpy` data.

Data access
-----------

   .. code-block:: python

      if silx.io.is_dataset(obj):
         # it contains data

         # a dataset provides information to the data
         obj.shape    # multidimentional shape
         obj.size     # amount of items
         obj.dtype    # type of the array

         # copy the full data as numpy array
         data = obj[...]

         # or a part of it (using numpy selector)
         data = obj[1:2, ::3, 7]

         # special case to access to the value of a scalar
         # i.e. a single integer, a single string...
         data = obj[()]

----

Silx IO API
===========

Specfile example
----------------

   .. code-block:: python

      import silx.io

      h5like = silx.io.open('data/oleg.dat')

      # print available scans
      print(h5like['/'].keys())

      # print available measurements from the scan 94.1
      print(h5like['/94.1/measurement'].keys())

      # get data from measurement
      time = h5like['/94.1/measurement/Epoch']
      bpm = h5like['/94.1/measurement/bpmi']
      mca = h5like['/94.1/measurement/mca_0/data']

----

Silx IO API
===========

EDF example
-----------

   .. code-block:: python

      import silx.io

      h5like = silx.io.open("data/medipix.edf")

      # here is the data as a cube using numpy array
      # it's a cube of images * number of frames
      data = h5like["/scan_0/instrument/detector_0/data"]
      # here is the first image
      data[0]

      # groups containing datasets of motors, counters
      # and others metadata from the EDF header
      motors   = h5like["/scan_0/instrument/positioners"]
      counters = h5like["/scan_0/instrument/measurement"]
      others   = h5like["/scan_0/instrument/detector_0/others"]

      # reach a monitor named 'mon'
      # it's a vector of values * number of frames
      monitor = counters["mon"]
      # here is the monitor value at the first frame
      monitor[0]

----

Silx IO API
===========

Example of data from ESRF
-------------------------

.. image:: img/tomo-edf-files.png
   :height: 500px
   :align: center

----

Silx IO API
===========

Example of data from ESRF
-------------------------

It is possible to convert it to HDF5

.. code-block:: bash

   $ silx convert --file-pattern diatomee_1_%d.edf -o diatomee.h5::/scan1/instrument
   $ silx convert --file-pattern dark.edf          -o diatomee.h5::/scan1/dark
                                                   --mode a
   $ silx convert --file-pattern refHST0000.edf    -o diatomee.h5::/scan1/flat_000
                                                   --mode a
   $ silx convert --file-pattern refHST0500.edf    -o diatomee.h5::/scan1/flat_500
                                                   --mode a

Which creates a single file

.. image:: img/tomo-h5-files.png

----

Silx IO API
===========

Example of data from ESRF
-------------------------

With this content

.. image:: img/tomo-h5-tree.png
   :height: 400px
   :align: center

----

Silx IO API
===========

Example of data from ESRF
-------------------------

   .. code-block:: python

      import silx.io

      h5 = silx.io.open("ID16B_diatomee.h5")

      # here is the data as a cube using numpy array
      # it's a cube of images * number of frames
      data = h5["/scan1/instrument/data"]

      # here is the first image
      print(data[0])

      # here is the size of the image
      print(data[0].shape)

      # here is other group names
      print(list(h5["/scan1"].keys()))

----

Exercises
=========

We provide you with a smaller file of this phase contrast acquisition: `ID16B_diatomee.h5`.

Using `Python` or `ipython`, here is some exercises.

- **Exercise 1**:
    - Access to the image/flat/dark data
- **Exercise 2**:
    - Apply a flatfield correction to a single image


Equation of the correction:

.. image:: img/equation-correction.png
   :height: 80px
   :align: center

.. code-block:: python

   def corrected(raw, background, flatfield):
       return (raw - background) / (flatfield - background)
